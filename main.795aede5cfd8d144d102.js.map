{"version":3,"sources":["webpack:///./index.js"],"names":["d","menuItems","module","Theme","LIGHT","DARK","domRefs","body","document","querySelector","menu","menuTemplate","chbSwitchTheme","currentSettings","localSettings","hasOwnProperty","theme","initSettings","JSON","parse","localStorage","getItem","switchThemeToDark","classList","add","remove","addEventListener","e","target","currentTarget","checked","window","setItem","stringify","forEach","element","markup","Handlebars","compile","innerHTML","trim","template","insertAdjacentHTML"],"mappings":"m0JA2D0BA,uBAxDpBC,EAAYC,EAAe,QAE3BC,EAAQ,CACZC,MAAO,cACPC,KAAM,cAGFC,EAAU,CACdC,KAAMC,SAASC,cAAc,QAC7BC,KAAMF,SAASC,cAAc,SAC7BE,aAAcH,SAASC,cAAc,kBACrCG,eAAgBJ,SAASC,cAAc,0BAGnCI,EA+BN,SAAsBC,GACpB,IAAID,EAAoC,OAAlBC,EAAyB,GAAKA,EAE/CD,EAAgBE,eAAe,SAGlCF,EAAgBG,MAAQF,EAAcE,MAFtCH,EAAgBG,MAAQb,EAAMC,MAIhC,OAAOS,EAvCeI,CACtBC,KAAKC,MAAMC,aAAaC,QAAQ,cAgDlC,SAASC,IACPhB,EAAQC,KAAKgB,UAAUC,IAAIrB,EAAME,MACjCC,EAAQC,KAAKgB,UAAUE,OAAOtB,EAAMC,OACpCS,EAAgBG,MAAQb,EAAME,KAhDhCC,EAAQM,eAAec,iBAAiB,SAWxC,SAA2BC,GACzB,GAAIA,EAAEC,SAAWD,EAAEE,cACjB,OAGEvB,EAAQM,eAAekB,QACzBR,KAmCFhB,EAAQC,KAAKgB,UAAUC,IAAIrB,EAAMC,OACjCE,EAAQC,KAAKgB,UAAUE,OAAOtB,EAAME,MACpCQ,EAAgBG,MAAQb,EAAMC,SArDhC2B,OAAOL,iBAAiB,eAsBxB,SAAsBC,GACpBP,aAAaY,QAAQ,WAAYd,KAAKe,UAAUpB,MAcxBb,EAnCKM,EAAjBO,EAoCNG,QAAUb,EAAME,MAASL,EAAEY,eAAekB,UAC9C9B,EAAEY,eAAekB,SAAU,EAC3BR,KApCJrB,EAAUiC,QAAQ,SAAAC,GAChB,IACMC,EADWC,IAAWC,QAAQhC,EAAQK,aAAa4B,UAAUC,OACpDC,CAASN,GACxB7B,EAAQI,KAAKgC,mBAAmB,aAAcN","file":"main.795aede5cfd8d144d102.js","sourcesContent":["import './styles.css';\nimport Handlebars from 'handlebars/dist/handlebars';\n\nconst menuItems = module.require('./menu.json');\n\nconst Theme = {\n  LIGHT: 'light-theme',\n  DARK: 'dark-theme',\n};\n\nconst domRefs = {\n  body: document.querySelector('body'),\n  menu: document.querySelector('#menu'),\n  menuTemplate: document.querySelector('#menu-template'),\n  chbSwitchTheme: document.querySelector('#theme-switch-control'),\n};\n\nconst currentSettings = initSettings(\n  JSON.parse(localStorage.getItem('settings')),\n);\n\ndomRefs.chbSwitchTheme.addEventListener('change', handleThemeSwitch);\nwindow.addEventListener('beforeunload', handleUnload);\n\napplySettings(currentSettings, domRefs);\n\nmenuItems.forEach(element => {\n  const template = Handlebars.compile(domRefs.menuTemplate.innerHTML.trim());\n  const markup = template(element); // html разметка с подставленным значениями\n  domRefs.menu.insertAdjacentHTML('afterBegin', markup);\n});\n\nfunction handleThemeSwitch(e) {\n  if (e.target !== e.currentTarget) {\n    return;\n  }\n\n  if (domRefs.chbSwitchTheme.checked) {\n    switchThemeToDark();\n  } else {\n    switchThemeToLight();\n  }\n}\n\nfunction handleUnload(e) {\n  localStorage.setItem('settings', JSON.stringify(currentSettings));\n}\n\nfunction initSettings(localSettings) {\n  let currentSettings = localSettings === null ? {} : localSettings;\n\n  if (!currentSettings.hasOwnProperty('theme')) {\n    currentSettings.theme = Theme.LIGHT;\n  } else {\n    currentSettings.theme = localSettings.theme;\n  }\n  return currentSettings;\n}\n\nfunction applySettings(s, d) {\n  if (s.theme === Theme.DARK && !d.chbSwitchTheme.checked) {\n    d.chbSwitchTheme.checked = true;\n    switchThemeToDark();\n  }\n}\n\nfunction switchThemeToDark() {\n  domRefs.body.classList.add(Theme.DARK);\n  domRefs.body.classList.remove(Theme.LIGHT);\n  currentSettings.theme = Theme.DARK;\n}\n\nfunction switchThemeToLight() {\n  domRefs.body.classList.add(Theme.LIGHT);\n  domRefs.body.classList.remove(Theme.DARK);\n  currentSettings.theme = Theme.LIGHT;\n}\n"],"sourceRoot":""}